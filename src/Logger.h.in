#ifndef SL_LOGGER_H
#define SL_LOGGER_H

#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>

#include <errno.h>
#include <libgen.h>
#include <pthread.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "SELKIELoggerBase.h"
#include "SELKIELoggerGPS.h"
#include "SELKIELoggerNMEA.h"

#include "version.h"

//! If no GPS port is specified on the command line, this value will be used
#define DEFAULT_GPS_PORT "@DEFAULT_GPS_PORT@"

//! If no output file prefix is specified, this will be used as a default
#define DEFAULT_MON_PREFIX "@DEFAULT_MON_PREFIX@"

//! Default serial wait time

/*!
 * If no data, the various reader threads usleep() for a period to give
 * sensors/devices time to send more data.
 *
 * The main logging thread also sleeps when no messages are available, which is
 * also based on this value.
 */
#define SERIAL_SLEEP 1E3

//! Device specific callback functions
typedef void *(*device_fn)(void *);

//! Device specific function information
typedef struct {
	device_fn startup;  //!< Called serially at startup, opens devices etc.
	device_fn logging;  //!< Main logging thread, passed to pthread_create()
	device_fn shutdown; //!< Called on shutdown - close handles etc.
} device_callbacks;

//! Logging thread information

/*!
 * This will be allocated by the main Logger thread, and used to pass
 * information to the device specific threads for initialisation, logging and
 * shutdown.
 */
typedef struct {
	char *tag; //!< Tag/device type for messages etc.
	msgqueue *logQ; //!< Main message queue. Pushed to by threads, consumed by main()
	program_state *pstate; //!< Current program state, used for logging
	device_callbacks funcs; //!< Callback information for this device/thread
	void *dParams; //!< Device/Thread specific data
	int returnCode; //!< Thread return code (output)
} log_thread_args_t;

#include "LoggerGPS.h"
#include "LoggerMP.h"
#include "LoggerNMEA.h"
#include "LoggerSignals.h"

#endif
