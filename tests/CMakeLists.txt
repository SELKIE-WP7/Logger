option(ENABLE_VALGRIND_CTEST "Add Valgrind support for CTest" ON)
if (ENABLE_VALGRIND_CTEST)
	if (USE_SANITIZER)
		message(SEND_ERROR "Valgrind and sanitizers don't play well together. Disable one.")
	endif()
	find_program(MEMORYCHECK_COMMAND valgrind)
	set(MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --track-origins=yes --trace-children=yes --error-exitcode=66")
endif()

function(instrumented testname command)
	add_test(NAME ${testname} COMMAND ${command} ${ARGN})
	if (ENABLE_VALGRIND_CTEST)
		set(vgcomm "${MEMORYCHECK_COMMAND} ${MEMORYCHECK_COMMAND_OPTIONS} ./${command} ${ARGN}")
		separate_arguments(vgcomm)
		add_test(NAME MemCheck:${testname} COMMAND ${vgcomm})
	endif()
	if (CODE_COVERAGE)
		target_code_coverage(${testname} AUTO ALL ARGS ${ARGN})
	endif()
endfunction(instrumented)

add_executable(UBXChecksumTest UBXChecksumTest.c)
target_link_libraries(UBXChecksumTest PUBLIC SELKIELoggerGPS)
instrumented(UBXChecksumTest UBXChecksumTest)

add_executable(UBXMessagesFromFile UBXMessagesFromFile.c)
target_link_libraries(UBXMessagesFromFile PUBLIC SELKIELoggerGPS)
file(COPY testSample.dat DESTINATION .)
instrumented(UBXMessagesFromFile UBXMessagesFromFile testSample.dat)
set_property(TEST UBXMessagesFromFile PROPERTY PASS_REGULAR_EXPRESSION "3 messages read")

add_executable(MPMessagesFromFile MPMessagesFromFile.c)
target_link_libraries(MPMessagesFromFile PUBLIC SELKIELoggerMP)
file(COPY mpTestSample.dat DESTINATION .)
instrumented(MPMessagesFromFile MPMessagesFromFile mpTestSample.dat)
set_property(TEST MPMessagesFromFile PROPERTY PASS_REGULAR_EXPRESSION "90 messages read")

add_executable(QueueTest QueueTest.c)
target_link_libraries(QueueTest PUBLIC SELKIELoggerBase)
instrumented(QueueTest QueueTest)

add_executable(SATests SATests.c)
target_link_libraries(SATests PUBLIC SELKIELoggerBase)
instrumented(SATests SATests)

add_executable(MPTests MPTests.c)
target_link_libraries(MPTests PUBLIC SELKIELoggerBase SELKIELoggerMP)
target_compile_options(MPTests PRIVATE "-UNDEBUG")
instrumented(MPTests MPTests)
add_test(NAME MPTestsOutput COMMAND bash -c "$<TARGET_FILE:MPTests>|md5sum")
set_property(TEST MPTestsOutput PROPERTY PASS_REGULAR_EXPRESSION "ee530c7e4b7a2c8f16524c0bf1e274cd")

add_executable(NMEAChecksumTest NMEAChecksumTest.c)
target_link_libraries(NMEAChecksumTest PUBLIC SELKIELoggerNMEA)
instrumented(NMEAChecksumTest NMEAChecksumTest)

add_executable(NMEAMessagesFromFile NMEAMessagesFromFile.c)
target_link_libraries(NMEAMessagesFromFile PUBLIC SELKIELoggerNMEA)
file(COPY NMEASample.dat DESTINATION .)
instrumented(NMEAMessagesFromFile NMEAMessagesFromFile NMEASample.dat)
# This tests three lines of output, in order. Note the \n and use of APPEND_STRING to build a single regex
set_property(TEST NMEAMessagesFromFile APPEND_STRING PROPERTY PASS_REGULAR_EXPRESSION "Thu Oct  8 16:15:07 2020\n")
set_property(TEST NMEAMessagesFromFile APPEND_STRING PROPERTY PASS_REGULAR_EXPRESSION "Thu Oct  8 16:15:27 2020\n")
set_property(TEST NMEAMessagesFromFile APPEND_STRING PROPERTY PASS_REGULAR_EXPRESSION "100 messages read")

add_executable(DWHexPairs DWHexPairs.c)
target_link_libraries(DWHexPairs PUBLIC SELKIELoggerDW)
instrumented(DWHexPairs DWHexPairs)

add_executable(DWSample DWSample.c)
target_link_libraries(DWSample PUBLIC SELKIELoggerDW)
instrumented(DWSample DWSample)

add_executable(LPMSMessagesFromFile LPMSMessagesFromFile.c)
target_link_libraries(LPMSMessagesFromFile PUBLIC SELKIELoggerLPMS)
file(COPY lpmscu3Sample.dat DESTINATION .)
instrumented(LPMSMessagesFromFile LPMSMessagesFromFile lpmscu3Sample.dat)
set_property(TEST LPMSMessagesFromFile PROPERTY PASS_REGULAR_EXPRESSION "19 messages successfully read from file")
add_test(NAME LPMSMessagesOutput COMMAND bash -c "$<TARGET_FILE:LPMSMessagesFromFile> lpmscu3Sample.dat|md5sum")
set_property(TEST LPMSMessagesOutput PROPERTY PASS_REGULAR_EXPRESSION "1966a807d8890313a9726fc07d14daf9")
